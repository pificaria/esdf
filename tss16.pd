#N canvas 157 162 1068 640 8;
#X obj 869 16 loadbang;
#X obj 869 36 spigot 1;
#X msg 929 36 0;
#X obj 869 56 f \$0;
#X obj 929 16 r \$0-stop.loadbang;
#X msg 869 76 \; \$1-path.r symbol asdf \; \$1-sel.r 0 \; \$1-base.r
0 \; \$1-type.r 0 \;;
#N canvas 351 370 826 406 store.state 0;
#X text 253 141 SEND: \$0-<parameter_name>.s;
#X text 253 161 RECEIVE: \$0-<parameter_name>.r;
#N canvas 81 45 329 237 read.write 0;
#X obj 74 111 savestate;
#X obj 74 91 r \$0-to.savestate;
#X obj 125 131 s \$0-savestate.right;
#X text 78 33 send and receive lists from the individual abstractions
, f 27;
#X obj 74 171 s \$0-savestate.left;
#X obj 74 131 t a b;
#X obj 101 151 s \$0-stop.loadbang;
#X connect 0 0 5 0;
#X connect 0 1 2 0;
#X connect 1 0 0 0;
#X connect 5 0 4 0;
#X connect 5 1 6 0;
#X restore 50 32 pd read.write;
#X text 253 341 With this method it's still required to create a new
[store.param] (or [store.array] or [store.text]) abstraction for every
parameter or table to be saved \, but at least there is no need to
patch all the send and receives individually., f 84;
#X text 253 221 Arrays can be saved as well with the [store.array]
object. The first argument is \$0 \, the second is the name of the
array without \$0-. The object on the left will save the content of
a table named "\$0-array1"., f 84;
#X text 253 31 This is the read/write subpatch which should be left
as-is., f 84;
#X text 253 81 In order for a parameter that is in the abstraction
to be saved in the parent patch \, here there needs to be a [store.param]
abstraction with the name of that parameter as the second argument
(whilst the first argument is always \$0). The send and receive symbols
for each parameter must be formated in this way:, f 84;
#X text 253 291 Text objects can be saved in a similar way to arrays
with this object [store.text]., f 84;
#X obj 50 82 state/store.param \$0 path;
#X obj 50 102 state/store.param \$0 sel;
#X obj 50 122 state/store.param \$0 base;
#X obj 50 142 state/store.param \$0 type;
#X restore 574 17 pd store.state;
#X obj 475 201 easyflow/GOPTool;
#X obj 502 450 namecanvas \$0-this;
#X obj 484 495 send \$0-this;
#X obj 706 17 text define \$0-txt;
#X obj 2 40 tgl 15 0 \$0-t1.s \$0-t1.r 1 5 -7 0 10 -262144 -1 -1 0
1;
#X obj 18 40 tgl 15 0 \$0-t2.s \$0-t2.r 2 5 -7 0 10 -262144 -1 -1 0
1;
#X obj 34 40 tgl 15 0 \$0-t3.s \$0-t3.r 3 5 -7 0 10 -262144 -1 -1 0
1;
#X obj 50 40 tgl 15 0 \$0-t4.s \$0-t4.r 4 5 -7 0 10 -262144 -1 -1 0
1;
#X obj 66 40 tgl 15 0 \$0-t5.s \$0-t5.r 5 5 -7 0 10 -262144 -1 -1 0
1;
#X obj 82 40 tgl 15 0 \$0-t6.s \$0-t6.r 6 5 -7 0 10 -262144 -1 -1 0
1;
#X obj 98 40 tgl 15 0 \$0-t7.s \$0-t7.r 7 5 -7 0 10 -262144 -1 -1 0
1;
#X obj 114 40 tgl 15 0 \$0-t8.s \$0-t8.r 8 5 -7 0 10 -262144 -1 -1
0 1;
#X obj 130 40 tgl 15 0 \$0-t9.s \$0-t9.r 9 5 -7 0 10 -262144 -1 -1
0 1;
#X obj 146 40 tgl 15 0 \$0-t10.s \$0-t10.r 10 2 -7 0 10 -262144 -1
-1 0 1;
#X obj 162 40 tgl 15 0 \$0-t11.s \$0-t11.r 11 2 -7 0 10 -262144 -1
-1 0 1;
#X obj 178 40 tgl 15 0 \$0-t12.s \$0-t12.r 12 2 -7 0 10 -262144 -1
-1 0 1;
#X obj 194 40 tgl 15 0 \$0-t13.s \$0-t13.r 13 2 -7 0 10 -262144 -1
-1 0 1;
#X obj 210 40 tgl 15 0 \$0-t14.s \$0-t14.r 14 2 -7 0 10 -262144 -1
-1 0 1;
#X obj 226 40 tgl 15 0 \$0-t15.s \$0-t15.r 15 2 -7 0 10 -262144 -1
-1 0 1;
#X obj 242 40 tgl 15 0 \$0-t16.s \$0-t16.r 16 2 -7 0 10 -262144 -1
-1 0 1;
#X floatatom 2 59 4 0 0 0 - - -;
#X obj 146 301 context :ID 1 :ol 1;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 0 5 0;
#X connect 4 0 2 0;
#X connect 7 0 9 0;
#X coords 0 1 1 -1 257 113 1 1 1;
